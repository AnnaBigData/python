# -*- coding: utf-8 -*-
"""
Created on Mon Feb 22 12:33:12 2021

@author: Anna Ku
"""

# Реализовать программу работы с органическими клетками. 
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
#  соответствующий количеству клеток (целое число).
#  В классе должны быть реализованы методы перегрузки арифметических операторов:
#      сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
#      деление (__truediv__()).Данные методы должны применяться только к клеткам
#      и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное)
# деление клеток, соответственно. 
#В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки 
# должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки.
#  Операцию необходимо выполнять только если разность количества ячеек двух 
#клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. 
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. 
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(),
#  принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
#  где количество ячеек между \n равно переданному аргументу.
#Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell: 
    
    def __init__(self, nucleus):
        self.nucleus = int(nucleus)
   
   
    def __add__(self, other):
        return self.nucleus + other.nucleus
    
    def __sub__(self, other):
        if (self.nucleus - other.nucleus) > 0:
            return self.nucleus - other.nucleus
        else:
            return False
    
    def __mul__(self, other):
        return self.nucleus * other.nucleus
            
    def __truediv__(self, other):
        return round(self.nucleus // other.nucleus)
    
    def make_order(self, n):
        rows, columns = self.nucleus // n, self.nucleus % n
        return '\n'.join(["*" * n] * rows + (['*' * columns] if columns else []))
    
        
c1 = Cell(20)
c2 = Cell(8)  

print (c1/c2)
 
print (c1.make_order(6))

